package main

import (
	"context"
	"net/http"
	"time"

	"github.com/underflow101/gomepage/router"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"

	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger"    // echo-swagger middleware
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
)

func main() {
	ctx, cancel = context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()
	err = client.Ping(ctx, readpref.Primary())

	collection := client.Database(db.DB).Collection(db.Collection)

	e := router.New()
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})
	e.PUT("/dbWrite", func(c echo.Context) error {
		collection.InsertOne(bson)
		return c.String(http.StatusOK, "DONE")
	})
	e.Logger.Fatal(e.Start(":8000"))

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	client, err := mongo.Connect(ctx, options.Client().ApplyURI("mongodb://localhost:27017"))

	defer func() {
		if err = client.Disconnect(ctx); err != nil {
			panic(err)
		}
	}()

	i := db.DB
}
